{"data":[{"type":"raw_html","html":"<div class=\"para\">If you're just starting out with Java and you're already familiar with String, you've probably seen something like this</div>"},{"type":"code","code":"String name = \"John\";\nname = name + \" Doe\";","lang":"java"},{"type":"raw_html","html":"<div class=\"para\">Looks simple, right? But what if I told you that behind the scenes, this isn't as efficient as it looks?</div><div class=\"para\">That's where <span class=\"code-highlight\">StringBuffer</span> and <span class=\"code-highlight\">StringBuilder</span> come in. We'll break down the difference between <span class=\"code-highlight\">String</span>, <span class=\"code-highlight\">StringBuffer</span>, and <span class=\"code-highlight\">StringBuilder</span> in a way that's easy to understand—even if you're just starting out.</div><div class=\"spacer-line-xl\"></div><div class=\"para\"><span class=\"light-bold\">The Problem With String</span></div><div class=\"spacer-line-m\"></div><div class=\"para\">In Java, Strings are immutable. That means: Once a String is created, it cannot be changed.</div><div class=\"para\">So, every time you do something like:</div>"},{"type":"code","code":"String s = \"Hello\";\ns = s + \" World\";","lang":"java"},{"type":"raw_html","html":"<div class=\"para\">Java creates a whole new String object for \"Hello World\" and assigns it to s. The original \"Hello\" is still sitting in memory until garbage collection kicks in.</div><div class=\"spacer-line-xl\"></div><div class=\"para\"><span class=\"light-bold\">Why is this a problem?</span></div><div class=\"spacer-line-m\"></div><div class=\"para\">If you're doing lots of string modifications (like in a loop), you're creating tons of new objects which:</div><div class=\"para\">&#8226; Use more memory</div><div class=\"para\">&#8226; Are slower to manage</div><div class=\"para\">&#8226; Slow down your program</div><div class=\"spacer-line-xl\"></div><div class=\"para\"><span class=\"light-bold\">StringBuffer: The Thread-Safe Builder</span></div><div class=\"spacer-line-m\"></div><div class=\"para\"><span class=\"code-highlight\">StringBuffer</span> is like a mutable version of <span class=\"code-highlight\">String</span>.</div>"},{"type":"code","code":"StringBuffer sb = new StringBuffer(\"Hello\");\nsb.append(\" World\");\nSystem.out.println(sb); // Output: Hello World","lang":"java"},{"type":"raw_html","html":"<div class=\"para\">Here, <span class=\"code-highlight\">sb</span> was updated in-place, meaning no new object was created!</div><div class=\"para\">Benefits of StringBuffer:</div><div class=\"para\">&#8226; Faster than String for string manipulation</div><div class=\"para\">&#8226; Mutable (can be changed without creating new objects)</div><div class=\"para\">&#8226; Thread-safe (can be used safely in multi-threaded environments)</div><div class=\"para\">What does thread-safe mean? It means multiple threads (parts of your program running at the same time) can use <span class=\"code-highlight\">StringBuffer</span> without messing each other up.</div><div class=\"spacer-line-xl\"></div><div class=\"para\"><span class=\"light-bold\">StringBuilder: The Speed Demon</span></div><div class=\"spacer-line-m\"></div><div class=\"para\"><span class=\"code-highlight\">StringBuilder</span> is almost identical to <span class=\"code-highlight\">StringBuffer</span>, except for one key difference: It is not thread-safe, but it's faster.</div>"},{"type":"code","code":"StringBuilder sb = new StringBuilder(\"Hello\");\nsb.append(\" World\");\nSystem.out.println(sb); // Output: Hello World","lang":"java"},{"type":"raw_html","html":"<div class=\"para\">If you're working in a single-threaded environment (most beginner apps are), StringBuilder is your go-to.</div><div class=\"para\">Benefits of StringBuilder:</div><div class=\"para\">&#8226; Faster than both <span class=\"code-highlight\">String</span> and <span class=\"code-highlight\">StringBuffer</span></div><div class=\"para\">&#8226; Mutable (can be changed without creating new objects)</div><div class=\"para\">&#8226; Best choice when thread safety is not needed.</div><div class=\"spacer-line-xl\"></div><div class=\"para\"><span class=\"light-bold\">String vs StringBuffer vs StringBuilder</span></div><div class=\"spacer-line-m\"></div>"},{"type":"table","html":"<table class='ctable'><tr><td class='ctable-header-top-left' style='min-width: 100px;'></td><td class='ctable-header-mid' style='min-width: 150px;'>String</td><td class='ctable-header-mid' style='min-width: 150px;'>StringBuffer</td><td class='ctable-header-top-right' style='min-width: 150px;'>StringBuilder</td></tr><tr><td class='ctable-header-mid'>Mutable?</td><td class='ctable-data'>No</td><td class='ctable-data'>Yes</td><td class='ctable-data'>Yes</td></tr><tr><td class='ctable-header-mid'>Thread-safe?</td><td class='ctable-data'>Yes</td><td class='ctable-data'>Yes</td><td class='ctable-data'>No</td></tr><tr><td class='ctable-header-mid'>Performance</td><td class='ctable-data'>Slow</td><td class='ctable-data'>Moderate</td><td class='ctable-data'>Fast</td></tr><tr><td class='ctable-header-mid'>Use in multithreading?</td><td class='ctable-data'>Yes</td><td class='ctable-data'>Yes</td><td class='ctable-data'>No</td></tr><tr><td class='ctable-header-bottom-left'>When to use?</td><td class='ctable-data'>You don’t modify the string much</td><td class='ctable-data'>You need thread safety</td><td class='ctable-data'>You need to update strings often</td></tr></table>"},{"type":"raw_html","html":"<div class=\"spacer-line-m\"></div><div class=\"para\"><span class=\"light-bold\">Coding Tips:</span></div><div class=\"spacer-line-m\"></div><div class=\"para\">If you're:</div><div class=\"para\">&#8226; Just printing messages or using constants – Stick with <span class=\"code-highlight\">String</span>.</div><div class=\"para\">&#8226; Building or modifying strings in a loop – Use <span class=\"code-highlight\">StringBuilder</span>.</div><div class=\"para\">&#8226; Doing the same in a multi-threaded program – Use <span class=\"code-highlight\">StringBuffer</span>.</div><div class=\"para\">Understanding this small difference will help you write faster, more efficient Java code from the start!</div>"}],"isCopyAllowed":false,"copyText":"","isReadAllowed":false,"readOutText":"","readoutReplace":[]}