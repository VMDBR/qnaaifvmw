{"data":[{"type":"raw_html","html":"<div class=\"para\">One of the most commonly used data types in any programming language is the <span class=\"light-bold\">Integer</span> type. These are used to store whole numbers — numbers without a decimal point (like 5, -10, 200, etc.).</div><div class=\"para\">Java has four different types of integer data types. Let’s break them down in the simplest way possible.</div><div class=\"spacer-line-l\"></div><div class=\"para\"><span class=\"light-bold\">Why Do We Need Different Integer Types?</span></div><div class=\"para\">Think of integer types like different sizes of boxes that can hold numbers. A small box (byte) takes up less space but can hold only small numbers. A big box (long) takes up more space and can store really large numbers.</div><div class=\"para\">Each box has a minimum and maximum value it can store. If your number is too big or too small for that box, it won’t fit!</div><div class=\"spacer-line-l\"></div><div class=\"para\"><span class=\"light-bold\">The 4 Integer Types in Java</span></div><div class=\"para\">Let’s walk through each one with some simple examples from Java code:</div>"},{"type":"code","code":"public class Demo {\n\tpublic static void main(String[] args) {\n\t\t// byte : 8-bit signed integer\n\t\tbyte b1 = Byte.MIN_VALUE;  // -128\n\t\tbyte b2 = Byte.MAX_VALUE;  // 127\n\t\tSystem.out.println(\"byte: \" + b1 + \" to \" + b2);\n\n\t\t// short : 16-bit signed integer\n\t\tshort s1 = Short.MIN_VALUE;  // -32,768\n\t\tshort s2 = Short.MAX_VALUE;  // 32,767\n\t\tSystem.out.println(\"short: \" + s1 + \" to \" + s2);\n\n\t\t// int : 32-bit signed integer\n\t\tint i1 = Integer.MIN_VALUE;  // -2,147,483,648\n\t\tint i2 = Integer.MAX_VALUE;  // 2,147,483,647\n\t\tSystem.out.println(\"int: \" + i1 + \" to \" + i2);\n\n\t\t// long : 64-bit signed integer\n\t\tlong l1 = Long.MIN_VALUE;  // -9,223,372,036,854,775,808\n\t\tlong l2 = Long.MAX_VALUE;  // 9,223,372,036,854,775,807\n\t\tSystem.out.println(\"long: \" + l1 + \" to \" + l2);\n\t}\n}","lang":"java"},{"type":"raw_html","html":"<div class=\"para\">Output:</div>"},{"type":"code","code":"byte data type size is between -128 to 127\nshort data type size is between -32768 to 32767\nint data type size is between -2147483648 to 2147483647\nlong data type size is between -9223372036854775808 to 9223372036854775807\n\n\nExample:\nbyte 121\nshort 10221\nint 60000\nlong 21474836472","lang":"text"},{"type":"raw_html","html":"<span class=\"light-bold\">Let’s understand each data type</span><div class=\"spacer-line-xl\"></div><div class=\"para\"><span class=\"code-highlight\">byte</span> – The Smallest Integer type (8 bits)</div><div class=\"para\">&#8226; Range: -128 to 127</div><div class=\"para\">&#8226; Size: 1 byte</div><div class=\"para\">&#8226; Use case: When you want to save memory, like in large arrays of small numbers.</div><div class=\"para\">&#8226; Example: You have 100 sensors that only give values between -100 and 100.</div><div class=\"spacer-line-xl\"></div><div class=\"para\"><span class=\"code-highlight\">short</span> – The Integer type (16 bits)</div><div class=\"para\">&#8226; Range: -32,768 to 32,767</div><div class=\"para\">&#8226; Size: 2 bytes</div><div class=\"para\">&#8226; Use case: Still useful to save memory but for slightly larger numbers than byte.</div><div class=\"para\">&#8226; Example: You're building a mobile game where each character's health points (HP) range from -30,000 to 30,000.</div><div class=\"spacer-line-xl\"></div><div class=\"para\"><span class=\"code-highlight\">int</span> – The default Integer type (32 bits)</div><div class=\"para\">&#8226; Range: -2,147,483,648 to 2,147,483,647</div><div class=\"para\">&#8226; Size: 4 bytes</div><div class=\"para\">&#8226; Use case: Used almost everywhere when dealing with whole numbers.</div><div class=\"para\">&#8226; Example: You're tracking the number of views on a video streaming platform. A video might get millions of views.</div><div class=\"spacer-line-xl\"></div><div class=\"para\"><span class=\"code-highlight\">long</span> – The Integer type (64 bits)</div><div class=\"para\">&#8226; Range: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</div><div class=\"para\">&#8226; Size: 8 bytes</div><div class=\"para\">&#8226; Use case: When your numbers are too big for int, like storing distances in space, or timestamps.</div><div class=\"para\">&#8226; Example: You're storing timestamps in milliseconds (like the current time since 1970) or handling population numbers of countries.</div><div class=\"para\">&#8226; <span class=\"light-bold\">NOTE</span> If you use a number that’s too big for int, like 21474836472, you must add L at the end to tell Java it’s a long:</div>"},{"type":"code","code":"long l = 21474836472L;","lang":"java"},{"type":"raw_html","html":"<span class=\"light-bold\">Summary Table</span><div class=\"spacer-line-xl\"></div>"},{"type":"table","html":"<table class='ctable'><tr><td class='ctable-header-top-left'>Data Type</td><td class='ctable-header-mid' style='width:120px'>Size</td><td class='ctable-header-top-right'>Range</td></tr><tr><td class='ctable-data'><span class=\"code-highlight\">byte</span></td><td class='ctable-data'>1 byte</td><td class='ctable-data'>-128 to 127</td></tr><tr><td class='ctable-data'><span class=\"code-highlight\">short</span></td><td class='ctable-data'>2 bytes</td><td class='ctable-data'>-32,768 to 32,767</td></tr><tr><td class='ctable-data'><span class=\"code-highlight\">int</span></td><td class='ctable-data'>4 bytes</td><td class='ctable-data'>-2,147,483,648 to 2,147,483,647</td></tr><tr><td class='ctable-data'><span class=\"code-highlight\">long</span></td><td class='ctable-data'>8 bytes</td><td class='ctable-data'>-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</td></tr></table>"},{"type":"raw_html","html":"<span class=\"light-bold\">Coding Tips</span><div class=\"spacer-line-xl\"></div><div class=\"para\">If you're new to Java, just remember: Start with int for most numbers. Use byte or short if you want to save memory. Use long if your number is too big for int. Java gives you flexibility so you can use the right size of container for your number. Understanding this helps you write efficient and optimized code.</div>"},{"type":"raw_html","html":"<div class=\"spacer-line-xl\"></div><span class=\"light-bold\">Reference</span><div class=\"spacer-line-l\"></div>"},{"type":"links","links":[{"displayText":"Java Demo Primitive Data Type Integer","link":"https://github.com/VaibhavMojidra/Java---Demo-Primitive-Data-Type-Integer"}]},{"type":"raw_html","html":"<div class=\"spacer-line-xl\"></div><span class=\"light-bold\">More about primitive data type in java</span><div class=\"spacer-line-l\"></div>"},{"type":"attachment","attachments":[{"type":"img","link":"https://raw.githubusercontent.com/VaibhavMojidra/Java---Demo-Primitive-Data-Type-Integer/master/output/primitive-data-types.png"}]}],"isCopyAllowed":false,"copyText":"","isReadAllowed":false,"readOutText":"","readoutReplace":[]}